#!/usr/bin/env node --harmony
'use strict';

process.env.NODE_PATH = __dirname + '/../node_modules/';

const program = require('commander');

program
    .version(require('../package').version);

program
    .usage('<command>');

program.on('--help', function(){
    console.log('  Examples:');
    console.log('');
    console.log('    $ slice init');
    console.log('    $ slice run --help');
    console.log('');
});

program
    .command('add')
    .description('新增一个项目模板')
    .alias('a')
    .action(() => {
        require('../command/add')()
    });

program
    .command('list')
    .description('可用项目模板列表')
    .alias('l')
    .action(() => {
        require('../command/list')()
    });

program
    .command('init')
    .description('初始化一个新项目')
    .alias('i')
    .action(() => {
        require('../command/init')()
    });

program
    .command('delete')
    .description('删除一个项目模板')
    .alias('del')
    .action(() => {
        require('../command/delete')()
    });

program
    .command('run [project-dir]')
    .alias('r')
    .description('在浏览器启动一个项目')
    .option('-i, --ip', '设置浏览器启动的URL类型为IP')
    .option('-t, --template <engine>', '设置模板引擎(file-include|smarty) 默认是smarty')
    .action((proDir, options) => {
        var ip = options.ip;
        var tempEngine = options.template;

        ip = ip || true;
        require('../command/run')(proDir, {IP: ip, template: tempEngine});
    });

program
    .command('build [project-dir]')
    .alias('b')
    .option('-z, --zip', '将build目录打包成build.zip')
    .option('-c, --cssOutputStyle <type>', 'sass的编译风格，取值范围：nested,expanded,compact,compressed, 默认:compact')
    .option('-s, --spriteDir <DIR>', '通过指定目录，自动生成css sprite')
    .option('-t, --template <engine>', '设置模板引擎(file-include|smarty) 默认是smarty')
    .option('-i, --imagemini', '是否开启图片压缩')
    .description('输出项目页面')
    .action((proDir, options) => {
        var zip = options.zip;
        var cos = options.cssOutputStyle || 'compact';
        var sprDir = options.spriteDir || '';
        var tempEngine = options.template;
        var isIm = options.imagemini;

        var opts = {
            outputStyle: cos,
            spritesmith: {
                imagepath: sprDir
            },
            zip: zip ? true : false,
            isIm: isIm ? true : false,
            template: tempEngine
        };

        require('../command/build')(proDir, opts);
    });

program
    .command('deploy [project-dir]')
    .description('构建发布页面')
    .alias('d')
    .action((proDir) => {

        require('../command/deploy')(proDir);
    });
program
    .command('config')
    .description('打印slice-cli配置文件路径')
    .alias('c')
    .option('-l, --list', '打印当前配置文件信息')
    .option('-d, --dir <file>', '重新指定slice-cli配置文件')
    .action((options) => {
        var list = options.list;
        var dir = options.dir;
        
        if (list) {
            require('../command/config.list')();
        } else if (dir) {
            require('../command/config.dir')(dir);
        } else {
            require('../command/config')();
        }
    });

program
    .command('fetch [project-dir]')
    .description('导出模板dataManifest')
    .alias('f')
    .option('-d, --del', '删除模板dataManifest输出的文件')
    .action((proDir, options) => {
        var action = options.del ? 'del' : '';

        require('../command/fetch')(proDir, action);
    });

program.parse(process.argv);

if (!program.args.length) {
    program.help();
}